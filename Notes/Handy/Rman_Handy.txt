===== RMAN NOTES ======

If one of your database data files fails, the traditional solution is to restore the data file from your RMAN backup and then recover it. In summary, the steps are roughly as follows:

    Take the tablespace offline (if not already).
    Restore the data file from RMAN backup.
    Apply the incremental backups.
    Recover the data file by applying archived redo logs.
    Bring the tablespace online.
If you have image copies instead of RMAN backups its easier to recover because they are actual copies of Datafiles rather than RMAN backups
backup as copy datafile 6 format='+DATA';
sql 'alter database datafile 6 offline';
switch datafile 6 to copy;
recover datafile 6;
sql 'alter database datafile 6 online';

------

You can decide that you want your backups to be retained in the fast recovery area for a specific number of days. After the specified number of days, RMAN will mark the backups as obsolete, making them eligible for deletion. By using a recovery window, you’re ensuring that you can recover your database to any point within the recovery window. For example, if your recovery window is configured to be seven days, you can recover the database to any day and time within the past week.

A backup set is a logical structure that consists of a minimum of one backup piece, which is a physical, RMAN-specific format file that actually contains the backed-up data. A backup set can contain data from one or more data files, archived log files, or control files A backup set can’t contain a combination of data files and archived  log files. By default, a backup set contains just one backup piece. 
The key difference between an image copy and a backup set is that RMAN can write blocks from many files into the same backup set (known as multiplexing) but can’t do so in the case of an image copy—an image copy is identical, byte by byte, to the original data file, control file, or archived redo log file. An RMAN image copy and a copy you make with an operating system copy command, such as dd (which makes image copies), are identical.

The control file auto backups contain metadata about the previous backup. RMAN makes a control file auto backup after every backup command you issue from the command line and after every backup command in a run block that’s not followed by another backup command. Control file auto backups are significant because RMAN can restore the control file even if you lose both the control file and the recovery catalog.

Only never-used data blocks are skipped to save on space. Even if a previously used data block is currently empty because the data was deleted at some point, RMAN still backs up the data block. The reason for this seemingly odd behavior is that RMAN was designed to back up data even when the database isn’t open when you can’t access the data dictionary to check whether a specific data block is on the free list (blocks get on the free list once all data has been deleted from them).

A differential incremental backup is an incremental backup of all data blocks that changed subsequently to a level 0 or a level 1 backup. RMAN first looks for a level 1 backup and, in its absence, looks for a level 0 backup and backs up all changes since that level 0 backup.

A cumulative incremental backup is an incremental backup of all data blocks that changed subsequently to the most recent level 0 incremental backup.

The delete obsolete command relies only on the backup retention policy in force. It doesn’t consider the configured archived redo log deletion policy in effect to determine which archived redo logs are obsolete. The delete archivelog all command, on the other hand, relies entirely on the configured archived redo log deletion policy.

Anytime you restore a control file from a backup (and use it for a recovery), you are required to perform media recovery on your entire database and then open it with the open resetlogs command. This is true even if you don’t restore any data files (because the control file’s SCN is no longer synchronized with the SCNs in the data files and online redo log files). You can determine whether your control file is a backup by querying the CONTROLFILE_TYPE column of the V$DATABASE view. 


DELETE BACKUP OF archivelog UNTIL TIME='sysdate-5';

RMAN> delete archivelog high sequence 650;

list archivelogs from yesterday.

RMAN> list archivelog time between 'sysdate -1' and 'sysdate'

Delete archivelogs backed up 1 time to disk

RMAN> delete archive log all backed up 1 times to disk;

Delete backups older than 7 days

RMAN> delete backup completed before 'sysdate-7';

Check For Logical And Physical Block Corruption

RMAN>list backup of database; 

========
Restoring Archives
========

catalog backuppiece '/opt/contexts/backup/oracle/rman/PRDEQD11/PRDEQD11_20211215_ka0gplk7_1_1';
crosscheck backuppiece '/opt/contexts/backup/oracle/rman/PRDEQD11/PRDEQD11_20211215_ka0gplk7_1_1';

RESTORE ARCHIVELOG FROM SEQUENCE 171424 until sequence 171492;

Restore archivelog between to scn numbers

RMAN> restore archivelog scn between 547484587 and 547662805;

---- DB BACKUP DETAILS ----

set pages 50000;
set lines 250;
col STATUS format a9
col hrs format 999.99
col start_time format a15;
col end_time format a15;
select SESSION_KEY
,INPUT_TYPE
,STATUS
,to_char(START_TIME,'mm/dd/yy hh24:mi') start_time
,to_char(END_TIME,'mm/dd/yy hh24:mi') end_time
,elapsed_seconds/3600 hrs
,round (output_bytes/1024/1024/1024 , 2) GB
from 
V$RMAN_BACKUP_JOB_DETAILS 
where INPUT_TYPE='DB FULL'
order by session_key;

---- ARCHIVELOG BACKUP DETAILS ----

set pages 50000;
set lines 250;
col STATUS format a9
col hrs format 999.99
col start_time format a15;
col end_time format a15;
select SESSION_KEY
,INPUT_TYPE
,STATUS
,to_char(START_TIME,'mm/dd/yy hh24:mi') start_time
,to_char(END_TIME,'mm/dd/yy hh24:mi') end_time
,elapsed_seconds/60 MINS
,round(INPUT_BYTES/1024/1024,2) INPUT_MBS
,round(INPUT_BYTES_PER_SEC ,2) INPUT_BYTES_PER_SEC
,round(OUTPUT_BYTES/1024/1024,2) OUTPUT_MBS
,round(OUTPUT_BYTES_PER_SEC,2) OUTPUT_BYTES_PER_SEC
from 
V$RMAN_BACKUP_JOB_DETAILS 
where INPUT_TYPE='ARCHIVELOG'
and start_time > trunc(sysdate)
order by session_key;

========== CONFIGURING RATE ===========

CONFIGURE CHANNEL DEVICE TYPE DISK FORMAT   '/opt/contexts/backup/oracle/rman/<dbname>/%d_%T_%U' RATE 3M;

========== LOG SWITCH HANDY ===========

set pages 999 lines 400
col Day format a3
col h0 format 999
col h1 format 999
col h2 format 999
col h3 format 999
col h4 format 999
col h5 format 999
col h6 format 999
col h7 format 999
col h8 format 999
col h9 format 999
col h10 format 999
col h11 format 999
col h12 format 999
col h13 format 999
col h14 format 999
col h15 format 999
col h16 format 999
col h17 format 999
col h18 format 999
col h19 format 999
col h20 format 999
col h21 format 999
col h22 format 999
col h23 format 999
SELECT TRUNC (first_time) "Date", inst_id, TO_CHAR (first_time, 'Dy') "Day",
 COUNT (1) "Total",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '00', 1, 0)) "h0",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '01', 1, 0)) "h1",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '02', 1, 0)) "h2",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '03', 1, 0)) "h3",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '04', 1, 0)) "h4",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '05', 1, 0)) "h5",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '06', 1, 0)) "h6",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '07', 1, 0)) "h7",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '08', 1, 0)) "h8",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '09', 1, 0)) "h9",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '10', 1, 0)) "h10",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '11', 1, 0)) "h11",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '12', 1, 0)) "h12",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '13', 1, 0)) "h13",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '14', 1, 0)) "h14",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '15', 1, 0)) "h15",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '16', 1, 0)) "h16",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '17', 1, 0)) "h17",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '18', 1, 0)) "h18",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '19', 1, 0)) "h19",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '20', 1, 0)) "h20",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '21', 1, 0)) "h21",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '22', 1, 0)) "h22",
 SUM (DECODE (TO_CHAR (first_time, 'hh24'), '23', 1, 0)) "h23",
 ROUND (COUNT (1) / 24, 2) "Avg"
FROM gv$log_history
WHERE thread# = inst_id
AND first_time > sysdate -10
GROUP BY TRUNC (first_time), inst_id, TO_CHAR (first_time, 'Dy')
ORDER BY 1,2;

========= RESTRICTING THE RMAN BACKUP SPEED =========

-- this is in MBps so the n/w bandwidth it will be using is times 8 so in this example 200Mbps. Remember the Allocate command needs to be run from withing the run{} block. TARGET is the source, to <> is the destination in this example your are cloning PRDFX01 to PRDFX02

rman target sys/sys@PRDFX01 auxiliary sys/sys@PRDFX02

SPOOL LOG TO '/opt/contexts/prd-fx/oracle/admin/PRDFX02/build/DuplicateActiveDatabase_to_PRDFX02_00.out'

run{
ALLOCATE AUXILIARY CHANNEL 19C DEVICE TYPE DISK RATE=25M;
ALLOCATE CHANNEL 19C_1 DEVICE TYPE DISK RATE=25M;
DUPLICATE TARGET DATABASE TO PRDFX02  FROM ACTIVE DATABASE
LOGFILE
        GROUP 1 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 2 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 3 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 4 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 5 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 6 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 7 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M,
        GROUP 8 ('+PRDFX02_REDO01','+PRDFX02_REDO02') SIZE 400M;
}
exit

========= FRA USAGE =========

select
  file_type,
  space_used*percent_space_used/100/1024/1024 used,
  space_reclaimable*percent_space_reclaimable/100/1024/1024 reclaimable,
  frau.number_of_files
from v$recovery_file_dest rfd, v$flash_recovery_area_usage frau;

==========

